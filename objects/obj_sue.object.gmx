<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_suedown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer1 = 600
timer1bool = false
immune = false
image_speed = 1;
ghost_speed = 5;
direction = 180;
enum suestates
{
normal,
scared,
eaten
}

state = suestates.normal
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if instance_exists(obj_pacman)
{

if obj_music.timerscared &gt; 595
{
immune = false
}

if state == suestates.normal
{
if global.scared = true &amp;&amp; immune = false
{
state = suestates.scared
}

ghost_speed = 5;
new_direction = -1;
distance_to_pacman = 9999999;

move_wrap(true,true,8)

depth = -y;

//UP
if direction != 270
{
    if place_meeting(x,y-2, obj_wall) == false
    {
        var dist = point_distance(x,y+8, obj_pacman.x, obj_pacman.y);
        if dist &lt; distance_to_pacman
        {
            new_direction = 90;
            distance_to_pacman = dist;
            sprite_index = spr_sueup
        }
    }
}

//LEFT
if direction != 0
{
    if place_meeting(x-2,y, obj_wall) == false
    {
        var dist = point_distance(x-8,y, obj_pacman.x, obj_pacman.y);
        if dist &lt; distance_to_pacman
        {
            new_direction = 180;
            distance_to_pacman = dist;
            sprite_index = spr_sueleft
        }
    }
}

//RIGHT
if direction != 180
{
    if place_meeting(x+2,y, obj_wall) == false
    {
        var dist = point_distance(x+8,y, obj_pacman.x, obj_pacman.y);
        if dist &lt; distance_to_pacman
        {
            new_direction = 0;
            distance_to_pacman = dist;
            sprite_index = spr_sueright
        }
    }
}

//DOWN
if direction != 90
{
    if place_meeting(x,y+2, obj_wall) == false
    {
        var dist = point_distance(x,y+8, obj_pacman.x, obj_pacman.y);
        if dist &lt; distance_to_pacman
        {
            new_direction = 270;
            distance_to_pacman = dist;
            sprite_index = spr_suedown
        }
    }
}

if new_direction != -1
{
direction = new_direction
}

move_contact_solid(direction,ghost_speed)
}
else if state == suestates.scared
{
randomize();
ghost_speed = 2;
new_direction = -1;
distance_to_pacman = 9999999;

if global.scared == false
{
state = suestates.normal
}

move_wrap(true,true,8)

depth = -y;

var dx = choose(24,80,72,204,152,208,144);
var dy = choose(274,160,104,40,80,272,216);

if point_distance(x,y, obj_pacman.x,obj_pacman.y) &lt; 64
{
dx = choose(24,80,72,204,152,208,144);
dy = choose(274,160,104,40,80,272,216);
}

//UP
if direction != 270
{
    if place_meeting(x,y-2, obj_wall) == false
    {
        var dist = point_distance(x,y-8, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 90;
            distance_to_pacman = dist;
            sprite_index = spr_scaredghostup
        }
    }
}

//LEFT
if direction != 0
{
    if place_meeting(x-2,y, obj_wall) == false
    {
        var dist = point_distance(x-8,y, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 180;
            distance_to_pacman = dist;
            sprite_index = spr_scaredghostleft
        }
    }
}

//RIGHT
if direction != 180
{
    if place_meeting(x+2,y, obj_wall) == false
    {
        var dist = point_distance(x+8,y, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 0;
            distance_to_pacman = dist;
            sprite_index = spr_scaredghostright
        }
    }
}

//DOWN
if direction != 90
{
    if place_meeting(x,y+2, obj_wall) == false
    {
        var dist = point_distance(x,y+8, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 270;
            distance_to_pacman = dist;
            sprite_index = spr_scaredghostdown
        }
    }
}

if new_direction != -1
{
direction = new_direction
}

move_contact_solid(direction,ghost_speed)
}
else if state == suestates.eaten
{
ghost_speed = 4
new_direction = -1;
distance_to_pacman = 9999999;

move_wrap(true,true,8)

depth = -y;

var dx = obj_ghostspawn.x;
var dy = obj_ghostspawn.y;

if point_distance(x,y, obj_pacman.x,obj_pacman.y) &lt; 64
{
dx = obj_ghostspawn.x;
dy = obj_ghostspawn.y;
}

if instance_position(x,y,obj_ghostspawn)
{
audio_play_sound(snd_ghostrespawn,498,false)
immune = true
state = suestates.normal
}

//UP
if direction != 270
{
    if place_meeting(x,y-2, obj_wall) == false
    {
        var dist = point_distance(x,y-8, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 90;
            distance_to_pacman = dist;
            sprite_index = spr_ghosteatenup
        }
    }
}

//LEFT
if direction != 0
{
    if place_meeting(x-2,y, obj_wall) == false
    {
        var dist = point_distance(x-8,y, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 180;
            distance_to_pacman = dist;
            sprite_index = spr_ghosteatenleft
        }
    }
}

//RIGHT
if direction != 180
{
    if place_meeting(x+2,y, obj_wall) == false
    {
        var dist = point_distance(x+8,y, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 0;
            distance_to_pacman = dist;
            sprite_index = spr_ghosteatenright
        }
    }
}

//DOWN
if direction != 90
{
    if place_meeting(x,y+2, obj_wall) == false
    {
        var dist = point_distance(x,y+8, dx, dy);
        if dist &lt; distance_to_pacman
        {
            new_direction = 270;
            distance_to_pacman = dist;
            sprite_index = spr_ghosteatendown
        }
    }
}

if new_direction != -1
{
direction = new_direction
}

move_contact_solid(direction,ghost_speed)
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
