<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pacmanright</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//please dont mess with this its for the collision box
boxx1 = 2
boxy1 = 1
boxx2 = 2
boxy2 = 1
//jumping stuff
zspeed = 0;
jumpspeed = -8;
grav = 0.6;
z = 0;
zfloor = 0;
//timer stuff i dont remember you can just look in the code
timer1def = 60
timer1 = timer1def
timer1bool = false
//player default speed
pm_defaultsp = 4;
//player current speed
pm_speed = pm_defaultsp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var jump = keyboard_check_pressed(vk_space)

pm_speed = pm_defaultsp;
clamp(timer1, 0, timer1def)
clamp(z,0,9999)
clamp(zspeed,0,9999)

timer1 -= 1;

if timer1 = 0
{
pm_defaultsp = 4
timer1 = timer1def
}

if pm_speed != 0
{
image_speed = pm_speed / 8
}
else
{
image_speed = 1
}

move_wrap(true,true,8)

depth = -y;

if (jump &amp;&amp; zspeed == 0)
{
    zspeed = jumpspeed;
}

if (z != zfloor)
{
zspeed += grav
}

if (z + zspeed &gt; zfloor)
{
zspeed = 0;
z = zfloor
}

z += zspeed;

var ins = collision_rectangle(x-boxx1,y-boxy1-1,x+boxx2,y+boxy2-1, obj_powerdot, false, false);
if ins != noone &amp;&amp; z &gt; -4
{
audio_play_sound(snd_powerdot,100, false)
if global.scared == false
{
audio_play_sound(snd_scaredstart,99,false)
}
obj_music.timerscared = 600
global.scared = true
with(ins)
{
instance_destroy()
}
exit
}

var insp = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_dot, false, false);
if insp != noone &amp;&amp; z &gt; -4
{
audio_play_sound(choose(snd_wakka1,snd_wakka2,snd_wakka3,snd_wakka4),100, false)
with(insp)
{
instance_destroy()
}
exit
}

var ins2 = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_dashpanel, false, false);
if ins2 != noone &amp;&amp; z = 0
{
if !audio_is_playing(snd_dashpanel)
{
audio_play_sound(snd_dashpanel, 50,false)
}
pm_defaultsp = 8
timer1 = timer1def
}

var insblink = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_blinky, false, false);
if insblink != noone &amp;&amp; z &gt; -16
{
if insblink.state == blinkystates.scared
{
audio_play_sound(snd_ghosteat,101,false)
with(insblink)
{
state = blinkystates.eaten
}
}
else if insblink.state == blinkystates.normal
{
room_restart();
}
}

var inspinky = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_pinky, false, false);
if inspinky != noone &amp;&amp; z &gt; -16
{
if inspinky.state == pinkystates.scared
{
audio_play_sound(snd_ghosteat,101,false)
with(inspinky)
{
state = pinkystates.eaten
}
}
else if inspinky.state == pinkystates.normal
{
room_restart();
}
}

var insclyde = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_clyde, false, false);
if insclyde != noone &amp;&amp; z &gt; -16
if insclyde.state == clydestates.scared
{
audio_play_sound(snd_ghosteat,101,false)
with(insclyde)
{
state = clydestates.eaten
}
}
else if insclyde.state == clydestates.normal
{
room_restart();
}

var insinky = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_inky, false, false);
if insinky != noone &amp;&amp; z &gt; -16
if insinky.state == inkystates.scared
{
audio_play_sound(snd_ghosteat,101,false)
with(insinky)
{
state = inkystates.eaten
}
}
else if insinky.state == inkystates.normal
{
room_restart();
}

var inssue = collision_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2, obj_sue, false, false);
if inssue != noone &amp;&amp; z &gt; -16
if inssue.state == suestates.scared
{
audio_play_sound(snd_ghosteat,101,false)
with(inssue)
{
state = suestates.eaten
}
}
else if inssue.state == suestates.normal
{
room_restart();
}

if keyboard_check(vk_left) == true
{
if place_meeting(x-4,y, obj_wall) == false
{
direction = 180;
sprite_index = spr_pacmanleft
}
}

if keyboard_check(vk_right) == true
{
if place_meeting(x+4,y, obj_wall) == false
{
direction = 0;
sprite_index = spr_pacmanright
}
}

if keyboard_check(vk_up) == true
{
if place_meeting(x,y-4, obj_wall) == false
{
direction = 90;
sprite_index = spr_pacmanup
}
}

if keyboard_check(vk_down) == true
{
if place_meeting(x,y+4, obj_wall) == false
{
direction = 270;
sprite_index = spr_pacmandown
}
}
move_contact_solid(direction,pm_speed)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(sprite_index,image_index,x,y+z)
// debug pt 1 draw_rectangle(x-boxx1,y-boxy1,x+boxx2,y+boxy2,true)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
