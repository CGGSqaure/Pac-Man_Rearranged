<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blinkydown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawner spawning 
spawn = 0;
with(instance_create(x,y,obj_ghostspawn))
{
    other.spawn = id;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// default variables for all ghosts
targetx = 0;
targety = 0;
z = 0;
immune = false;
image_speed = 1;
ghost_speed = 2;
direction = 180;
enum states
{
normal,
scared,
eaten
}

state = states.normal

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ghost specific start
//blinky
if sprite_index = spr_blinkydown
{
    // main
    ghost = 0 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_blinkyup;
    spr_down = spr_blinkydown;
    spr_left = spr_blinkyleft;
    spr_right = spr_blinkyright;
    
}
// pinky
if sprite_index = spr_pinkydown
{
    // main
    ghost = 1 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_pinkyup;
    spr_down = spr_pinkydown;
    spr_left = spr_pinkyleft;
    spr_right = spr_pinkyright;
}
// clyde
if sprite_index = spr_clydedown
{
    // main
    ghost = 2 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_clydeup;
    spr_down = spr_clydedown;
    spr_left = spr_clydeleft;
    spr_right = spr_clyderight;
}
// inky
if sprite_index = spr_inkydown
{
    // main
    ghost = 3 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_inkyup;
    spr_down = spr_inkydown;
    spr_left = spr_inkyleft;
    spr_right = spr_inkyright;
}
// sue
if sprite_index = spr_suedown
{
    // main
    ghost = 4 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_sueup;
    spr_down = spr_suedown;
    spr_left = spr_sueleft;
    spr_right = spr_sueright;
    // specific variable 
    corner = 1;
}
// funky
if sprite_index = spr_funkydown
{
    // main
    ghost = 5 //gonna add a number for the ghost to indetify it in code, so like 0 is blinky, 1 is pinky and so on....
    // sprites
    spr_up = spr_funkyup;
    spr_down = spr_funkydown;
    spr_left = spr_funkyleft;
    spr_right = spr_funkyright;
    // specific variable 
    zspeed = 0;
    jumpspeed = -8;
    grav = 0.6;
    z = 0;
    zfloor = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ghost specific step event
if instance_exists(obj_pacman)
{
// blinky
if ghost = 0
{
    targetx = obj_pacman.x;
    targety = obj_pacman.y;
}

//pinky
if ghost = 1
{
    xdirs[0] = +48;
    xdirs[1] = 0//-48;
    xdirs[2] = -48;
    xdirs[3] = 0;
    ydirs[0] = 0;
    ydirs[1] = -48;
    ydirs[2] = 0;
    ydirs[3] = +48;
    
    targetx = obj_pacman.x + xdirs[obj_pacman.direction/90];
    targety = obj_pacman.y + ydirs[obj_pacman.direction/90];
}
// clyde 
if ghost = 2
{
    targetx = obj_pacman.x;
    targety = obj_pacman.y;
    
    if point_distance(x,y, obj_pacman.x,obj_pacman.y) &gt; 96
    {
    targetx = 0;
    targety = room_height;
    }
}
// inky 
if ghost = 3
{
    xdirs[0] = -24;
    xdirs[1] = +24;
    xdirs[2] = +24;
    xdirs[3] = 0;
    ydirs[0] = 0;
    ydirs[1] = +24;
    ydirs[2] = 0;
    ydirs[3] = -24;
    
    targetx = obj_pacman.x + xdirs[obj_pacman.direction/90];
    targety = obj_pacman.y + ydirs[obj_pacman.direction/90];
}
// sue
if ghost = 4
{
    if corner = 0
    {
        targetx = 0;
        targety = 0;
        if(point_distance(x,y,targetx,targety) &lt; 96)
        {
            corner++;
        }
    }
    else if corner = 1
    {
        targetx = room_width;
        targety = 0;
        if(point_distance(x,y,targetx,targety) &lt; 96)
        {
            corner++;
        }
    }
    else if corner = 2
    {
        targetx = room_width;
        targety = room_height;
        if(point_distance(x,y,targetx,targety) &lt; 96)
        {
            corner++;
        }
    }
    else if corner = 3
    {
        targetx = 0;
        targety = room_height;
        if(point_distance(x,y,targetx,targety) &lt; 96)
        {
            corner = 0;
        }
    }
}
// funky 
if ghost = 5
{
    var jump = keyboard_check_pressed(vk_space)
    
    if (jump &amp;&amp; zspeed == 0)
    {
        zspeed = jumpspeed;
    }
    
    if (z != zfloor)
    {
        zspeed += grav;
    }
    
    if (z + zspeed &gt; zfloor)
    {
        zspeed = 0;
        z = zfloor
    }
    
    z += zspeed;
    
    targetx = obj_pacman.x;
    targety = obj_pacman.y;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// All ghost state normal
if instance_exists(obj_pacman)
{

if obj_music.timerscared &gt; 595
{
immune = false
}

if state == states.normal
{
if global.scared = true &amp;&amp; immune = false
{
state = states.scared;
direction *= -1;
exit;
}

ghost_speed = 2;
new_direction = -1;
distance_to_pacman = 99999;

move_wrap(true,true,8)

depth = -y;

//UP
if direction != 270
{
    if place_meeting(x,y-ghost_speed, obj_wall) == false
    {
        var dist = point_distance(x,y-ghost_speed, targetx, targety);
        if dist &lt; distance_to_pacman
        {
            new_direction = 90;
            distance_to_pacman = dist;
            sprite_index = spr_up
        }
    }
}

//LEFT
if direction != 0
{
    if place_meeting(x-ghost_speed,y, obj_wall) == false
    {
        var dist = point_distance(x-ghost_speed,y, targetx, targety);
        if dist &lt; distance_to_pacman
        {
            new_direction = 180;
            distance_to_pacman = dist;
            sprite_index = spr_left
        }
    }
}

//RIGHT
if direction != 180
{
    if place_meeting(x+ghost_speed,y, obj_wall) == false
    {
        var dist = point_distance(x+ghost_speed,y, targetx, targety);
        if dist &lt; distance_to_pacman
        {
            new_direction = 0;
            distance_to_pacman = dist;
            sprite_index = spr_right
        }
    }
}

//DOWN
if direction != 90
{
    if place_meeting(x,y+ghost_speed, obj_wall) == false
    {
        var dist = point_distance(x,y+ghost_speed, targetx, targety);
        if dist &lt; distance_to_pacman
        {
            new_direction = 270;
            distance_to_pacman = dist;
            sprite_index = spr_down
        }
    }
}

if new_direction != -1
{
direction = new_direction
}

move_contact_solid(direction,ghost_speed)
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// all ghost scared and dead step event
if instance_exists(obj_pacman)
{
    if state == states.scared
    {
    randomize();
    ghost_speed = 1;
    new_direction = -1;
    distance_to_pacman = 9999999;
    
    if global.scared == false
    {
    state = states.normal
    }
    
    move_wrap(true,true,8)
    
    depth = -y;
    // new scared code
    var right = -1;
    var left = -1;
    var top = -1;
    var down = -1;
    if(!place_meeting(x+ghost_speed,y,obj_wall) &amp;&amp; direction != 180)
    right = 0;
    if(!place_meeting(x-ghost_speed,y,obj_wall) &amp;&amp; direction != 0)
    left = 180;
    if(!place_meeting(x,y+ghost_speed,obj_wall) &amp;&amp; direction != 90)
    down = 270;
    if(!place_meeting(x,y-ghost_speed,obj_wall) &amp;&amp; direction != 270)
    top = 90;

    new_direction = choose(right,left,top,down)
    
    // old scared code
    /*var dx = choose(24,80,72,204,152,208,144);
    var dy = choose(274,160,104,40,80,272,216);
    
    if point_distance(x,y, obj_pacman.x,obj_pacman.y) &lt; 64
    {
    dx = choose(24,80,72,204,152,208,144);
    dy = choose(274,160,104,40,80,272,216);
    }
    
    //UP
    if direction != 270
    {
        if place_meeting(x,y-2, obj_wall) == false
        {
            var dist = point_distance(x,y-8, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 90;
                distance_to_pacman = dist;
                sprite_index = spr_scaredghostup
            }
        }
    }
    
    //LEFT
    if direction != 0
    {
        if place_meeting(x-2,y, obj_wall) == false
        {
            var dist = point_distance(x-8,y, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 180;
                distance_to_pacman = dist;
                sprite_index = spr_scaredghostleft
            }
        }
    }
    
    //RIGHT
    if direction != 180
    {
        if place_meeting(x+2,y, obj_wall) == false
        {
            var dist = point_distance(x+8,y, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 0;
                distance_to_pacman = dist;
                sprite_index = spr_scaredghostright
            }
        }
    }
    
    //DOWN
    if direction != 90
    {
        if place_meeting(x,y+2, obj_wall) == false
        {
            var dist = point_distance(x,y+8, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 270;
                distance_to_pacman = dist;
                sprite_index = spr_scaredghostdown
            }
        }
    }*/
    
    if new_direction != -1
    {
        direction = new_direction
        if direction = top
        sprite_index = spr_scaredghostup;
        if direction = down
        sprite_index = spr_scaredghostdown;
        if direction = right
        sprite_index = spr_scaredghostright;
        if direction = left
        sprite_index = spr_scaredghostleft;
    }
    
    move_contact_solid(direction,ghost_speed)
    
    
    // state eaten 
    }
    else if state == states.eaten
    {
    // fix for getting stuck 
    if(x%2 != 0 || y%2 != 0)
    {
        ghost_speed = 3;
    }
    else
    {
        ghost_speed = 4
    }
     
    new_direction = -1;
    distance_to_pacman = 9999999;
    
    move_wrap(true,true,8)
    
    depth = -y;
    
    var dx = spawn.x;
    var dy = spawn.y;
    
    if instance_position(x,y,obj_ghostspawn)
    {
    audio_play_sound(snd_ghostrespawn,498,false)
    immune = true
    state = states.normal
    }
    
    //UP
    if direction != 270
    {
        if place_meeting(x,y-ghost_speed, obj_wall) == false
        {
            var dist = point_distance(x,y-ghost_speed, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 90;
                distance_to_pacman = dist;
                sprite_index = spr_ghosteatenup
            }
        }
    }
    
    //LEFT
    if direction != 0
    {
        if place_meeting(x-ghost_speed,y, obj_wall) == false
        {
            var dist = point_distance(x-ghost_speed,y, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 180;
                distance_to_pacman = dist;
                sprite_index = spr_ghosteatenleft
            }
        }
    }
    
    //RIGHT
    if direction != 180
    {
        if place_meeting(x+ghost_speed,y, obj_wall) == false
        {
            var dist = point_distance(x+ghost_speed,y, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 0;
                distance_to_pacman = dist;
                sprite_index = spr_ghosteatenright
            }
        }
    }
    
    //DOWN
    if direction != 90
    {
        if place_meeting(x,y+ghost_speed, obj_wall) == false
        {
            var dist = point_distance(x,y+ghost_speed, dx, dy);
            if dist &lt; distance_to_pacman
            {
                new_direction = 270;
                distance_to_pacman = dist;
                sprite_index = spr_ghosteatendown
            }
        }
    }
    
    if new_direction != -1
    {
    direction = new_direction
    }
    
    move_contact_solid(direction,ghost_speed)
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_set_color(c_red)
//draw_line(x,y,targetx,targety);
draw_sprite(sprite_index,image_index,x,y+z)
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
